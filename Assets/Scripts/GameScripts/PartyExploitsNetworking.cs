using System.Collections.Generic;
using System.Text;

namespace FallenLand
{
	public class PartyExploitsNetworking
	{
		private readonly int PlayerIndex;
		private readonly byte PartyExploitsAction;
		private Coordinates MoveToLocation;
		private byte EncounterType;
		private bool IsRequestToMaster;
		private string EncounterCardName;

		public PartyExploitsNetworking(int playerIndex, byte partyExploitsAction)
		{
			PlayerIndex = playerIndex;
			PartyExploitsAction = partyExploitsAction;
		}

		public static object DeserializePartyExploits(byte[] data)
		{
            int playerIndex = data[0];
			byte playerExploitsAction = data[1];
			PartyExploitsNetworking result = new PartyExploitsNetworking(playerIndex, playerExploitsAction);

			if (playerExploitsAction == Constants.PARTY_EXPLOITS_MOVEMENT)
			{
				int xLoc = data[2];
				int yLoc = data[3];
				Coordinates coords = new Coordinates(xLoc, yLoc);
				result.SetMoveToLocation(coords);
			}

			return result;
		}

		public static byte[] SerializePartyExploits(object customType)
		{
			PartyExploitsNetworking partyExploitsInfo = (PartyExploitsNetworking)customType;
            List<byte> byteListFinal = new List<byte>
            {
                (byte)partyExploitsInfo.GetPlayerIndex(),
				partyExploitsInfo.GetPartyExploitsAction()
            };

			if (partyExploitsInfo.GetPartyExploitsAction() == Constants.PARTY_EXPLOITS_MOVEMENT)
			{
				Coordinates moveToLocation = partyExploitsInfo.GetMoveToLocation();
				if (moveToLocation == null)
				{
					UnityEngine.Debug.LogError("The move to location wasn't set when the party exploits move was being networked!");
					moveToLocation = new Coordinates(0, 0);
				}
				byteListFinal.Add((byte)moveToLocation.GetX());
				byteListFinal.Add((byte)moveToLocation.GetY());
			}
			else if (partyExploitsInfo.GetPartyExploitsAction() == Constants.PARTY_EXPLOITS_ENCOUNTER)
			{
				byteListFinal.Add(partyExploitsInfo.GetEncounterType());
            }

			return byteListFinal.ToArray();
		}

		public int GetPlayerIndex()
		{
			return PlayerIndex;
		}

		public byte GetPartyExploitsAction()
		{
			return PartyExploitsAction;
		}

		public Coordinates GetMoveToLocation()
		{
			return MoveToLocation;
		}

		public byte GetEncounterType()
		{
			return EncounterType;
		}

		public bool GetIsRequestToMaster()
		{
			return IsRequestToMaster;
		}

		public string GetEncounterCardName()
        {
			return EncounterCardName;
		}

		public void SetMoveToLocation(Coordinates coords)
		{
			if (coords != null)
			{
				MoveToLocation = coords;
			}
			else
			{
				UnityEngine.Debug.LogError("The location for the party exploits networking was null!");
			}
		}

		public void SetEncounterType(byte encounterType)
		{
			EncounterType = encounterType;
		}

		public void SetIsRequestToMaster(bool isRequest)
		{
			IsRequestToMaster = isRequest;
		}

		public void SetEncounterCardName(string encounterCardName)
		{
			EncounterCardName = encounterCardName;
		}
	}
}
